———————————— redirects
Test   1: ✅ grep hi <./test_files/infile 
Test   2: ✅ grep hi "<infile" <         ./test_files/infile 
Test   3: ✅ echo hi < ./test_files/infile bye bye 
Test   4: ✅ grep hi <./test_files/infile_big <./test_files/infile 
Test   5: ✅ echo <"./test_files/infile" "bonjour       42" 
Test   6: ✅ cat <"./test_files/file name with spaces" 
Test   7: ✅ cat <./test_files/infile_big ./test_files/infile 
Test   8: ✅ cat <"1""2""3""4""5" 
Test   9: ✅ echo <"./test_files/infile" <missing <"./test_files/infile" 
Test  10: ✅ echo <missing <"./test_files/infile" <missing 
Test  11: ✅ cat <"./test_files/infile" 
Test  12: ❌ echo <"./test_files/infile_big" | cat <"./test_files/infile" 
mini exit code = 1
bash exit code = 0
mini error = ( No such file or directory)
bash error = ()
Test  13: ✅ echo <"./test_files/infile_big" | cat "./test_files/infile" 
Test  14: ❌ echo <"./test_files/infile_big" | echo <"./test_files/infile" 
mini output = (< ./test_files/infile)
bash output = ()
Test  15: ❌ echo hi | cat <"./test_files/infile" 
mini exit code = 1
bash exit code = 0
mini error = ( No such file or directory)
bash error = ()
Test  16: ✅ echo hi | cat "./test_files/infile" 
Test  17: ❌ cat <"./test_files/infile" | echo hi 
mini exit code = 141
bash exit code = 0
mini error = ( No such file or directory Broken pipe)
bash error = ( Broken pipe)
Test  18: ✅⚠️  cat <"./test_files/infile" | grep hello 
mini error = ( No such file or directory)
bash error = ()
Test  19: ❌ cat <"./test_files/infile_big" | echo hi 
mini exit code = 141
bash exit code = 0
mini error = ( No such file or directory Broken pipe)
bash error = ( Broken pipe)
Test  20: ✅ cat <missing 
Test  21: ✅⚠️  cat <missing | cat 
mini error = ( No such file or directory No such file or directory)
bash error = ( No such file or directory)
Test  22: ❌ cat <missing | echo oi 
mini exit code = 1
bash exit code = 0
mini error = ( No such file or directory No such file or directory)
bash error = ( No such file or directory)
Test  23: ❌ cat <missing | cat <"./test_files/infile" 
mini exit code = 1
bash exit code = 0
mini error = ( No such file or directory No such file or directory No such file or directory)
bash error = ( No such file or directory)
Test  24: ✅⚠️  echo <123 <456 hi | echo 42 
mini error = ()
bash error = ( No such file or directory)
Test  25: ✅ ls >./outfiles/outfile01 
Test  26: ✅ ls >         ./outfiles/outfile01 
Test  27: ✅ echo hi >         ./outfiles/outfile01 bye 
Test  28: ✅ ls >./outfiles/outfile01 >./outfiles/outfile02 
Test  29: ✅ ls >./outfiles/outfile01 >./test_files/invalid_permission 
Test  30: ✅ ls >"./outfiles/outfile with spaces" 
Test  31: ✅ ls >"./outfiles/outfile""1""2""3""4""5" 
Test  32: ✅ ls >"./outfiles/outfile01" >./test_files/invalid_permission >"./outfiles/outfile02" 
Test  33: ✅ ls >./test_files/invalid_permission >"./outfiles/outfile01" >./test_files/invalid_permission 
Test  34: ✅ cat <"./test_files/infile" >"./outfiles/outfile01" 
Test  35: ❌ echo hi >./outfiles/outfile01 | echo bye 
Only in ./bash_outfiles: outfile01
mini outfiles:
cat: './mini_outfiles/*': No such file or directory
bash outfiles:
hi
Test  36: ❌ echo hi >./outfiles/outfile01 >./outfiles/outfile02 | echo bye 
Only in ./bash_outfiles: outfile01
Only in ./bash_outfiles: outfile02
mini outfiles:
cat: './mini_outfiles/*': No such file or directory
bash outfiles:
hi
Test  37: ❌ echo hi | echo >./outfiles/outfile01 bye 
Only in ./bash_outfiles: outfile01
mini outfiles:
cat: './mini_outfiles/*': No such file or directory
bash outfiles:
bye
mini output = (> ./outfiles/outfile01 bye)
bash output = ()
Test  38: ❌ echo hi | echo bye >./outfiles/outfile01 >./outfiles/outfile02 
Only in ./bash_outfiles: outfile01
Only in ./bash_outfiles: outfile02
mini outfiles:
cat: './mini_outfiles/*': No such file or directory
bash outfiles:
bye
mini output = (bye > ./outfiles/outfile01 > ./outfiles/outfile02)
bash output = ()
Test  39: ❌ echo hi >./outfiles/outfile01 | echo bye >./outfiles/outfile02 
Only in ./bash_outfiles: outfile01
Only in ./bash_outfiles: outfile02
mini outfiles:
cat: './mini_outfiles/*': No such file or directory
bash outfiles:
hi
bye
mini output = (bye > ./outfiles/outfile02)
bash output = ()
Test  40: ❌ echo hi >./outfiles/outfile01 >./test_files/invalid_permission | echo bye 
Only in ./bash_outfiles: outfile01
mini outfiles:
cat: './mini_outfiles/*': No such file or directory
bash outfiles:
mini error = ()
bash error = ( Permission denied)
Test  41: ✅⚠️  echo hi >./test_files/invalid_permission | echo bye 
mini error = ()
bash error = ( Permission denied)
Test  42: ✅⚠️  echo hi >./test_files/invalid_permission >./outfiles/outfile01 | echo bye 
mini error = ()
bash error = ( Permission denied)
Test  43: ❌ echo hi | echo bye >./test_files/invalid_permission 
mini output = (bye > ./test_files/invalid_permission)
bash output = ()
mini exit code = 141
bash exit code = 1
mini error = ()
bash error = ( Permission denied)
Test  44: ❌ echo hi | >./outfiles/outfile01 echo bye >./test_files/invalid_permission 
Only in ./bash_outfiles: outfile01
mini outfiles:
cat: './mini_outfiles/*': No such file or directory
bash outfiles:
mini output = (minishell: >: command not found)
bash output = ()
mini exit code = 127
bash exit code = 1
mini error = ()
bash error = ( Permission denied)
Test  45: ❌ echo hi | echo bye >./test_files/invalid_permission >./outfiles/outfile01 
mini output = (bye > ./test_files/invalid_permission > ./outfiles/outfile01)
bash output = ()
mini exit code = 0
bash exit code = 1
mini error = ()
bash error = ( Permission denied)
Test  46: ✅ cat <"./test_files/infile" >./test_files/invalid_permission 
Test  47: ✅ cat >./test_files/invalid_permission <"./test_files/infile" 
Test  48: ✅ cat <missing >./outfiles/outfile01 
Test  49: ❌ cat >./outfiles/outfile01 <missing 
Only in ./bash_outfiles: outfile01
mini outfiles:
cat: './mini_outfiles/*': No such file or directory
bash outfiles:
Test  50: ✅ cat <missing >./test_files/invalid_permission 
Test  51: ✅⚠️  cat >./test_files/invalid_permission <missing 
mini error = ( No such file or directory)
bash error = ( Permission denied)
Test  52: ❌ cat >./outfiles/outfile01 <missing >./test_files/invalid_permission 
Only in ./bash_outfiles: outfile01
mini outfiles:
cat: './mini_outfiles/*': No such file or directory
bash outfiles:
Test  53: ✅ ls >>./outfiles/outfile01 
Test  54: ✅ ls >>      ./outfiles/outfile01 
Test  55: ✅ ls >>./outfiles/outfile01 >./outfiles/outfile01 
Test  56: ✅ ls >./outfiles/outfile01 >>./outfiles/outfile01 
Test  57: ✅ ls >./outfiles/outfile01 >>./outfiles/outfile01 >./outfiles/outfile02 
Test  58: ✅ ls >>./outfiles/outfile01 >>./outfiles/outfile02 
Test  59: ✅ ls >>./test_files/invalid_permission 
Test  60: ✅ ls >>./test_files/invalid_permission >>./outfiles/outfile01 
Test  61: ✅ ls >>./outfiles/outfile01 >>./test_files/invalid_permission 
Test  62: ✅ ls >./outfiles/outfile01 >>./test_files/invalid_permission >>./outfiles/outfile02 
Test  63: ✅ ls <missing >>./test_files/invalid_permission >>./outfiles/outfile02 
Test  64: ✅⚠️  ls >>./test_files/invalid_permission >>./outfiles/outfile02 <missing 
mini error = ( No such file or directory)
bash error = ( Permission denied)
Test  65: ❌ echo hi >>./outfiles/outfile01 | echo bye 
Only in ./bash_outfiles: outfile01
mini outfiles:
cat: './mini_outfiles/*': No such file or directory
bash outfiles:
hi
Test  66: ❌ echo hi >>./outfiles/outfile01 >>./outfiles/outfile02 | echo bye 
Only in ./bash_outfiles: outfile01
Only in ./bash_outfiles: outfile02
mini outfiles:
cat: './mini_outfiles/*': No such file or directory
bash outfiles:
hi
Test  67: ❌ echo hi | echo >>./outfiles/outfile01 bye 
Only in ./bash_outfiles: outfile01
mini outfiles:
cat: './mini_outfiles/*': No such file or directory
bash outfiles:
bye
mini output = (>> ./outfiles/outfile01 bye)
bash output = ()
Test  68: ❌ echo hi | echo bye >>./outfiles/outfile01 >>./outfiles/outfile02 
Only in ./bash_outfiles: outfile01
Only in ./bash_outfiles: outfile02
mini outfiles:
cat: './mini_outfiles/*': No such file or directory
bash outfiles:
bye
mini output = (bye >> ./outfiles/outfile01 >> ./outfiles/outfile02)
bash output = ()
Test  69: ❌ echo hi >>./outfiles/outfile01 | echo bye >>./outfiles/outfile02 
Only in ./bash_outfiles: outfile01
Only in ./bash_outfiles: outfile02
mini outfiles:
cat: './mini_outfiles/*': No such file or directory
bash outfiles:
hi
bye
mini output = (bye >> ./outfiles/outfile02)
bash output = ()
Test  70: ✅⚠️  echo hi >>./test_files/invalid_permission | echo bye 
mini error = ()
bash error = ( Permission denied)
Test  71: ❌ echo hi >>./test_files/invalid_permission >./outfiles/outfile01 | echo bye 
mini exit code = 141
bash exit code = 0
mini error = ()
bash error = ( Permission denied)
Test  72: ❌ echo hi | echo bye >>./test_files/invalid_permission 
mini output = (bye >> ./test_files/invalid_permission)
bash output = ()
mini exit code = 0
bash exit code = 1
mini error = ()
bash error = ( Permission denied)
Test  73: ❌ echo hi | echo >>./outfiles/outfile01 bye >./test_files/invalid_permission 
Only in ./bash_outfiles: outfile01
mini outfiles:
cat: './mini_outfiles/*': No such file or directory
bash outfiles:
mini output = (>> ./outfiles/outfile01 bye > ./test_files/invalid_permission)
bash output = ()
mini exit code = 0
bash exit code = 1
mini error = ()
bash error = ( Permission denied)
Test  74: ✅ cat <minishell.h>./outfiles/outfile 
Test  75: ✅⚠️  cat <minishell.h|ls 
mini error = ( No such file or directory No such file or directory)
bash error = ( No such file or directory)









I token di redirezione finiscono nell’argv
Ecco perché stampa output tipo bye > ./outfiles/outfile02.
➜ Nel parsing del singolo comando (fino a TK_PIPE), quando incontri TK_REDIR_IN / OUT / APPEND / HEREDOC:

non aggiungere né il simbolo né il filename all’argv;

salva invece nei campi della t_cmd (es. infile, outfile, append, ecc.).
Regola “last one wins”: se trovi più redirezioni uguale lato, tieni l’ultima.

Le redirezioni non vengono applicate per ogni segmento della pipeline
Test 35–39, 65–69: il file non viene creato quando la redirezione sta sul comando a sinistra del |.
➜ Ogni child della pipeline deve applicare le proprie redirezioni prima di exec (o prima di eseguire il builtin nel child).
Ordine in child:

setup pipe (dup2 verso stdin/stdout se non primo/ultimo),

poi applica redirezioni (le redirezioni devono sovrascrivere il pipe se presenti),

chiudi fd inutili,

esegui.

Builtin in pipeline
Se un builtin è dentro una pipeline, va eseguito in un child, non nel processo padre.
Diversamente, non prenderà pipe/redirezioni e lascia residui nell’output.
➜ Esegui i builtin nel padre solo quando c’è un singolo comando senza pipe (per cd, export, unset, ecc.).

Redirezioni iniziali senza comando (es. > out echo bye)
Non è “>: command not found”. Bash le associa al comando successivo.
➜ Nel parser, accetta redirezioni prima della parola comando e agganciale alla t_cmd anche se argv è ancora vuoto.

Messaggi d’errore e errno
Vedo “No such file or directory” dove Bash dà “Permission denied”, e a volte messaggi doppi.
➜ Quando open() fallisce, stampa una sola volta:

css
Copia codice
minishell: <file>: <strerror(errno)>
e exit(1) nel child. Non usare messaggi hardcoded. Non aprire in parent (tranne heredoc).

Exit status della pipeline
In diversi test hai 141 (128+SIGPIPE) o 1 dove Bash dà 0.
➜ Lo status della pipeline deve essere quello dell’ultimo comando della pipeline.

Attendi tutti i child; salva lo pid dell’ultimo; il codice finale viene dal suo waitpid.

Il parent può ignorare SIGPIPE; nei child ripristinalo di default. Così non “contamina” lo status della shell quando un comando in mezzo rompe la pipe.




