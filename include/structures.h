/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   structures.h                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: vhacman <vhacman@student.42roma.it>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/07/16 16:12:25 by vhacman           #+#    #+#             */
/*   Updated: 2025/08/20 13:56:14 by vhacman          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef STRUCTURES_H
# define STRUCTURES_H

/* =============================== */
/*         CORE STRUCTURES         */
/* =============================== */

/*
** t_token:
** Linked list node representing a token produced by the lexer.
** 'value' holds the token string.
** 'type' holds one of the t_token_type values.
** 'next' points to the next token in the list.
*/
typedef struct s_token
{
	char			*value;
	int				type;
	struct s_token	*next;
}	t_token;

/*
** t_cmd:
** Represents a single parsed command in the shell.
** 'args' is a NULL-terminated array of arguments.
** 'path' is the resolved executable path or NULL for builtins.
** 'fd_in' / 'fd_out' store input/output fds (default 0/1).
** 'next' links to the next command in a pipeline.
** 'type' can classify the command.
** 'is_builtin' is a boolean flag.
** 'tokens' holds the tokens that formed this command.
*/
typedef struct s_cmd
{
	char			**args;
	char			*path;
	int				fd_in;
	int				fd_out;
	struct s_cmd	*next;
	int				type;
	int				is_builtin;
	t_token			*tokens;
}	t_cmd;

/*
** t_env:
** Linked list node for an environment variable.
** 'key' is the variable name.
** 'value' is the variable value.
** 'exported' is 1 if visible to child processes.
*/
typedef struct s_env
{
	char			*key;
	char			*value;
	int				exported;
	struct s_env	*next;
}	t_env;

/*
** t_shell: Main shell context structure holding all runtime state.
**
** line: current input line read from the user.
** tokens: linked list of tokens produced by the lexer.
** cmds: linked list of parsed commands ready for execution.
** env: linked list of environment variables.
** exit_status: exit code of the last executed command (used for $?).
** args: temporary NULL-terminated array of arguments for execution.
** program_name: name of the shell program (used in prompt/messages).
** saved_stdout: copy of STDOUT file descriptor for restoring output.
** redirect_type: last redirection type applied (e.g., >, >>, <, <<).
** saved_stdin: copy of STDIN file descriptor for restoring input.
*/
typedef struct s_shell
{
	char		*line;
	t_token		*tokens;
	t_cmd		*cmds;
	t_env		*env;
	int			exit_status;
	char		**args;
	char		*program_name;
	int			saved_stdout;
	int			redirect_type;
	int			saved_stdin;
}	t_shell;

/* =============================== */
/*       UTILITY STRUCTURES        */
/* =============================== */
/*
** t_token_context:
** Context structure for token parsing operations.
** Holds all data needed during lexical analysis and token creation.
**
** input: pointer to the original command line string being parsed.
** i: pointer to the current index position within 'input'.
** tokens: pointer to the head pointer of the token linked list.
** shell: pointer to the main shell context for accessing state/env.
** had_whitespace: flag set to 1 if whitespace was found before the
**                 current token, used to separate arguments.
*/
typedef struct s_token_context
{
	const char	*input;
	int			*i;
	t_token		**tokens;
	t_shell		*shell;
	int			had_whitespace;
}	t_token_context;

/*
** t_init_params:
** Parameter structure for initializing token parsing functions.
** Used to pass all required parsing data in a single object.
**
** str: pointer to the original command line string to process.
** i: pointer to the current index position within 'str'.
** tokens: pointer to the head pointer of the token linked list.
** shell: pointer to the main shell context, used for environment
**        access and parser state.
*/
typedef struct s_init_params
{
	const char	*str;
	int			*i;
	t_token		**tokens;
	t_shell		*shell;
}	t_init_params;

/*
** t_token_type:
** Enumeration of all possible token types generated by the lexer.
**
** TK_WORD: standard word (command, argument, filename).
** TK_PIPE: pipe operator (|) for chaining commands.
** TK_OUT: output redirection (>) overwriting the target file.
** TK_APPEND: output redirection append (>>) appending to the file.
** TK_IN: input redirection (<) reading from a file.
** TK_HEREDOC: here-document redirection (<<) reading inline text until EOF.
** TK_EOF: end-of-input marker (no more tokens to read).
*/
typedef enum e_token_type
{
	TK_WORD,
	TK_PIPE,
	TK_OUT,
	TK_APPEND,
	TK_IN,
	TK_HEREDOC,
	TK_EOF,
}	t_token_type;

#endif
